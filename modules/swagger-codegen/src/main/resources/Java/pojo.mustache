/**
* {{#description}}{{.}}{{/description}}{{^description}}{{classname}}{{/description}}
*/{{#description}}
    @ApiModel(description = "{{{description}}}"){{/description}}
{{>generatedAnnotation}}{{>typeInfoAnnotation}}
public class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{{#parcelableModel}}implements Parcelable {{#serializableModel}}, Serializable {{/serializableModel}}{{/parcelableModel}}{{^parcelableModel}}{{#serializableModel}}implements Serializable {{/serializableModel}}{{/parcelableModel}}{{#isNewsArticle}}, Comparable<NewsArticle>{{/isNewsArticle}}{

{{#vars}}
    {{#isEnum}}
        {{^isContainer}}
            {{>modelInnerEnum}}
        {{/isContainer}}
    {{/isEnum}}
    {{#items.isEnum}}
        {{#items}}
            {{^isContainer}}
                {{>modelInnerEnum}}
            {{/isContainer}}
        {{/items}}
    {{/items.isEnum}}
{{#backReference}}
    {{#isChild}}
   @JsonBackReference(value = "{{nameParentChild}}")
   private {{{datatypeparent}}} {{nameParentChild}};
    {{/isChild}}
{{/backReference}}
    {{^isChild}}
{{#backReference}}
    {{#isParent}}
   @JsonManagedReference(value = "{{nameChild}}")
    {{/isParent}}
{{/backReference}}
   private {{{datatypeWithEnum}}} {{name}} = {{{defaultValue}}};
    {{/isChild}}
{{/vars}}
{{#vars}}
    {{#isChild}}
{{#backReference}}
   public {{{datatypeWithEnum}}} {{getter}}() {
     return {{nameParentChild}};
   }

   public void {{setter}}({{{datatypeWithEnum}}} {{nameParentChild}}) {
     this.{{nameParentChild}} = {{nameParentChild}};
   }
{{/backReference}}
    {{/isChild}}
    {{^isChild}}
   /**
     {{#description}}
   * {{{description}}}
     {{/description}}
     {{^description}}
   * Get {{name}}
     {{/description}}
     {{#minimum}}
   * minimum: {{minimum}}
     {{/minimum}}
     {{#maximum}}
   * maximum: {{maximum}}
     {{/maximum}}
   * @return {{name}}
   **/
   {{#useBeanValidation}}{{>beanValidation}}{{/useBeanValidation}}@ApiModelProperty({{#example}}example = "{{example}}", {{/example}}{{#required}}required = {{required}}, {{/required}}value = "{{{description}}}")
   {{#vendorExtensions.extraAnnotation}}
            {{{vendorExtensions.extraAnnotation}}}
   {{/vendorExtensions.extraAnnotation}}
   @JsonProperty("{{baseName}}")
   public {{{datatypeWithEnum}}} {{getter}}() {
     return {{name}};
   }
   {{^isReadOnly}}

   public void {{setter}}({{{datatypeWithEnum}}} {{name}}) {
     this.{{name}} = {{name}};
   }
   {{/isReadOnly}}
   {{/isChild}}{{/vars}}
   @Override
   public boolean equals(Object o) {
      if (this == o) {
         return true;
      }
      if (o == null || getClass() != o.getClass()) {
         return false;
      }
      {{classname}} {{classVarName}} = ({{classname}}) o;
    {{#hasVars}}
      return {{#vars}}{{#isChild}}{{/isChild}}{{^isChild}}equals({{name}}, {{classVarName}}.{{name}}){{#hasMore}} &&
             {{/hasMore}}{{^hasMore}};{{/hasMore}}{{/isChild}}{{/vars}}
    {{/hasVars}}
    {{^hasVars}}
      return true;
    {{/hasVars}}
    }

   @Override
   public int hashCode() {
        Object a[] = new Object[]{ {{#vars}}{{#isChild}}{{/isChild}}{{^isChild}}{{name}}{{#hasMore}}, {{/hasMore}}{{/isChild}}{{/vars}} };
        if (a == null)
          return 0;

        int result = 1;

        for (Object element : a)
          result = 31 * result + (element == null ? 0 : element.hashCode());

      return result;
   }

   @Override
   public String toString() {
      StringBuilder sb = new StringBuilder();
      sb.append("class {{classname}} {\n");
      {{#parent}}sb.append("    ").append(toIndentedString(super.toString())).append("\n");{{/parent}}
      {{#vars}}{{#isChild}}{{/isChild}}{{^isChild}}sb.append("    {{name}}: ").append(toIndentedString({{name}})).append("\n");{{/isChild}}
      {{/vars}}sb.append("}");
      return sb.toString();
   }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
   private String toIndentedString(Object o) {
      if (o == null) {
        return "null";
      }
      return o.toString().replace("\n", "\n    ");
   }

{{#parcelableModel}}
   public void writeToParcel(Parcel out, int flags) {
    {{#parent}} super.writeToParcel(out, flags); {{/parent}} {{#vars}}
    out.writeValue({{name}});
    {{/vars}}
   }

   public {{classname}}() {
     super();
   }

    {{classname}}(Parcel in) {
    {{#parent}} super(in); {{/parent}}
    {{#vars}}
        {{#isContainer}}
            {{#complexType}}
                {{name}} = ({{{datatypeWithEnum}}})in.readValue({{complexType}}.class.getClassLoader());
            {{/complexType}}
            {{^complexType}}
                {{name}} = ({{{datatypeWithEnum}}})in.readValue(null);
            {{/complexType}}
        {{/isContainer}}
        {{^isContainer}}
            {{name}} = ({{{datatypeWithEnum}}})in.readValue(null);
        {{/isContainer}}
    {{/vars}}
    }

   public int describeContents() {
     return 0;
   }

   public static final Parcelable.Creator<{{classname}}> CREATOR = new Parcelable.Creator<{{classname}}>() {
   public {{classname}} createFromParcel(Parcel in) {
     return new {{classname}}(in);
   }
   public {{classname}}[] newArray(int size) {
     return new {{classname}}[size];
     }
   };
{{/parcelableModel}}

   public static boolean equals(Object a, Object b) {
     return (a == b) || (a != null && a.equals(b));
   }

{{#isNewsArticle}}
   @Override
   public int compareTo(NewsArticle another) {
     if (this.getId().equals(another.getId())) {
         return 0;
      }
     return -this.getDate().compareTo(another.getDate());
   }
{{/isNewsArticle}}
}
